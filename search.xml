<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP 基础巩固 - 函数</title>
    <url>/PHP%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/2020-06-18/PHP-foundation-consolidation-method/</url>
    <content><![CDATA[<h2 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h2><ul>
<li>一段封装好的代码，可以随时调用</li>
</ul>
<p>定义格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 (参数 1, 参数..N) &#123;</span><br><span class="line">    // 执行语句 </span><br><span class="line">    // <span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="函数的命名规范"><a href="#函数的命名规范" class="headerlink" title="函数的命名规范"></a>函数的命名规范</h2><ul>
<li><p>对于函数，命名规则和变量是一样的，但是函数不区分大小写</p>
</li>
<li><p>函数名称应该提示出它的功能</p>
</li>
<li><p>函数名称以字母或下划线开头 (不能以数字开头)</p>
</li>
</ul>
<h2 id="函数的调用过程与返回值"><a href="#函数的调用过程与返回值" class="headerlink" title="函数的调用过程与返回值"></a>函数的调用过程与返回值</h2><ul>
<li><p>函数调用时，代码执行权进入函数</p>
</li>
<li><p>当函数所有语句执行完毕，函数返回，交回执行权</p>
</li>
<li><p>或者函数碰到 return 语句时，函数返回，交回执行权</p>
</li>
</ul>
<h2 id="函数参数的传值方式"><a href="#函数参数的传值方式" class="headerlink" title="函数参数的传值方式"></a>函数参数的传值方式</h2><ul>
<li><p>函数外部的值 $b，传入到函数内部 $a，相当于把 $b 的值，赋给 $a，而 $a 是函数内部的值，怎么变，和外界无关</p>
</li>
<li><p>使用动态变量名时，$a 与 $b 指向了同一个地址，这种传参方式是不推荐的，因为函数内部的语句，影响到了外部的变量，破坏了函数的封装性</p>
</li>
</ul>
<h2 id="函数中变量的作用域"><a href="#函数中变量的作用域" class="headerlink" title="函数中变量的作用域"></a>函数中变量的作用域</h2><ul>
<li><p>在 PHP 的页面中声明的变量，叫 “全局变量”</p>
</li>
<li><p>函数内的变量，叫 “局部变量”</p>
</li>
<li><p>函数内生命全局变量，变量前增加 global</p>
</li>
<li><p>超级全局变量，在页面的任何部分，包括函数，方法等，都可以直接访问</p>
</li>
</ul>
<h2 id="动态调用函数"><a href="#动态调用函数" class="headerlink" title="动态调用函数"></a>动态调用函数</h2><ul>
<li>可以用变量的值当作函数，并调用函数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> a (<span class="variable">$c</span>) &#123;</span><br><span class="line">    <span class="variable">$c</span> += 1;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> b (3);</span><br><span class="line"></span><br><span class="line">//--------------------</span><br><span class="line"></span><br><span class="line">4</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP基础巩固</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>基础</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 基础巩固 - 控制结构</title>
    <url>/PHP%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/2020-06-14/undefined/</url>
    <content><![CDATA[<h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><ul>
<li><p>if 语句 - 在条件成立时执行代码</p>
</li>
<li><p>if…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码</p>
</li>
<li><p>if…else if….else 语句 - 在若干条件之一成立时执行一个代码块</p>
</li>
</ul>
<a id="more"></a>

<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><ul>
<li>if 语句用于仅当指定条件成立时执行代码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    条件成立时要执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>=date (<span class="string">"H"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$t</span>&lt;<span class="string">"20"</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Have a good day!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    条件成立时执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    条件不成立时执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>=date (<span class="string">"H"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$t</span>&lt;<span class="string">"20"</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Have a good day!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Have a good night!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if…else-if…-else"><a href="#if…else-if…-else" class="headerlink" title="if…else if….else"></a>if…else if….else</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="keyword">if</span> 条件成立时执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    elseif 条件成立时执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    条件不成立时执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>=date (<span class="string">"H"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$t</span>&lt;<span class="string">"10"</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Have a good morning!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$t</span>&lt;<span class="string">"20"</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Have a good day!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Have a good night!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><ul>
<li><p>switch 语句 - 在若干条件之一成立时执行一个代码块</p>
</li>
<li><p>switch case 适合用在验证多个可能的值时使用，不适合用在判断范围</p>
<ul>
<li>比如 60 - 80 及格， 0 - 59 不及格， 81 - 100 优</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">switch (n) &#123;</span><br><span class="line">    <span class="keyword">case</span> label1:</span><br><span class="line">        如果 n=label1，此处代码将执行；</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> label2:</span><br><span class="line">        如果 n=label2，此处代码将执行；</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    default:</span><br><span class="line">        如果 n 既不等于 label1 也不等于 label2，此处代码将执行；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原理：首先对一个简单的表达式 n（通常是变量）进行一次计算。将表达式的值与结构中每个 case 的值进行比较。如果存在匹配，则执行与 case 关联的代码。代码执行后，使用 break 来阻止代码跳入下一个 case 中继续执行。default 语句用于不存在匹配（即没有 case 为真）时执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$favcolor</span>=<span class="string">"red"</span>;</span><br><span class="line">switch (<span class="variable">$favcolor</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"red"</span>:</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"你喜欢的颜色是红色！"</span>;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"blue"</span>:</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"你喜欢的颜色是蓝色！"</span>;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"green"</span>:</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"你喜欢的颜色是绿色！"</span>;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    default:</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"你喜欢的颜色不是 红，蓝，或绿色！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ul>
<li>while 循环将重复执行代码块，直到指定的条件不成立</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    要执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable">$i</span>=1;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span>&lt;=5) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The number is"</span> . <span class="variable">$i</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The number is 1</span><br><span class="line">// The number is 2</span><br><span class="line">// The number is 3</span><br><span class="line">// The number is 4</span><br><span class="line">// The number is 5</span><br></pre></td></tr></table></figure>

<h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><ul>
<li>do…while 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    要执行的代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (条件);</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable">$i</span>=1;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The number is"</span> . <span class="variable">$i</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span>&lt;=5);</span><br><span class="line"></span><br><span class="line">// The number is 2</span><br><span class="line">// The number is 3</span><br><span class="line">// The number is 4</span><br><span class="line">// The number is 5</span><br><span class="line">// The number is 6</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><ul>
<li>for 循环用于预先知道脚本需要运行次数的情况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始值；条件；增量) &#123;</span><br><span class="line">    要执行的代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><p>初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）</p>
</li>
<li><p>条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束</p>
</li>
<li><p>增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=1; <span class="variable">$i</span>&lt;=5; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The number is"</span> . <span class="variable">$i</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line">// The number is 1</span><br><span class="line">// The number is 2</span><br><span class="line">// The number is 3</span><br><span class="line">// The number is 4</span><br><span class="line">// The number is 5</span><br></pre></td></tr></table></figure>

<h4 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h4><ul>
<li>foreach 循环用于遍历数组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">foreach (<span class="variable">$array</span> as <span class="variable">$value</span>) &#123;</span><br><span class="line">    要执行代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，将看到数组中的下一个值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=array (<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line">foreach (<span class="variable">$x</span> as <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$value</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-----------------------------</span><br><span class="line"></span><br><span class="line">//one</span><br><span class="line">//two</span><br><span class="line">//three</span><br></pre></td></tr></table></figure>

<h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul>
<li><p>break 是被用在各种循环和 switch 语句中的</p>
</li>
<li><p>他的作用是跳出当前的语法结构，执行下面的语句</p>
</li>
</ul>
<h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul>
<li><p>continue 是用来用在循环结构中，控制程序放弃本次循环 continue 语句之后的代码并转而进行下一次循环</p>
</li>
<li><p>continue 本身并不跳出循环结构，只是放弃这一次循环</p>
</li>
<li><p>如果在非循环结构中 (例如 if 语句中，switch 语句中) 使用 continue，程序将会出错</p>
</li>
</ul>
]]></content>
      <categories>
        <category>PHP基础巩固</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>基础</tag>
        <tag>控制结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 基础巩固 -- 运算符</title>
    <url>/PHP%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/2020-06-14/PHP-foundation-consolidation-operator/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>参考：<a href="https://www.runoob.com/php/php-operators.html" target="_blank" rel="noopener">PHP 菜鸟教程</a></p>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul>
<li><p>在 PHP 中，赋值运算符 = 用于给变量赋值</p>
</li>
<li><p>在 PHP 中，算术运算符 + 用于把值加在一起</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x + y</td>
<td align="center">加</td>
<td align="center">x 和 y 的和</td>
<td align="center">2 + 2</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">x - y</td>
<td align="center">减</td>
<td align="center">x 和 y 的差</td>
<td align="center">5 - 2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">x * y</td>
<td align="center">乘</td>
<td align="center">x 和 y 的积</td>
<td align="center">5 * 2</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">x /y</td>
<td align="center">除</td>
<td align="center">x 和 y 的商</td>
<td align="center">15 / 5</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">x % y</td>
<td align="center">模</td>
<td align="center">x 除以 y 的余数</td>
<td align="center">5 % 2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">取反</td>
<td align="center">x 取反</td>
<td align="center">$x = 2; echo -x;</td>
<td align="center">-2</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>注意：</p>
<ul>
<li><p>如果 int 型，运算后数据过大，会转换成 float 型</p>
</li>
<li><p>去摸算法时，结果的正负仅取决于被除数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = 10            // 使用 10 或 - 10</span><br><span class="line"><span class="variable">$b</span> = 3             // 使用 3 或 - 3</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> / <span class="variable">$b</span>       //a=-10 时，均为 - 1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul>
<li><p>比较运算符可以比较两个值</p>
</li>
<li><p>比较运算符的结果是布尔型的值</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x == y</td>
<td align="center">等于</td>
<td align="center">如果 x 等于 y，则返回 true</td>
<td align="center">5==8 返回 false</td>
</tr>
<tr>
<td align="center">x === y</td>
<td align="center">绝对等于</td>
<td align="center">如果 x 等于 y，且它们类型相同，则返回 true</td>
<td align="center">5===”5” 返回 false</td>
</tr>
<tr>
<td align="center">x != y</td>
<td align="center">不等于</td>
<td align="center">如果 x 不等于 y，则返回 true</td>
<td align="center">5!=8 返回 true</td>
</tr>
<tr>
<td align="center">x &lt;&gt; y</td>
<td align="center">不等于</td>
<td align="center">如果 x 不等于 y，则返回 true</td>
<td align="center">5&lt;&gt;8 返回 true</td>
</tr>
<tr>
<td align="center">x !== y</td>
<td align="center">绝对不等于</td>
<td align="center">如果 x 不等于 y，或它们类型不相同，则返回 true</td>
<td align="center">5!==”5” 返回 true</td>
</tr>
<tr>
<td align="center">x &gt; y</td>
<td align="center">大于</td>
<td align="center">如果 x 大于 y，则返回 true</td>
<td align="center">5&gt;8 返回 false</td>
</tr>
<tr>
<td align="center">x &lt; y</td>
<td align="center">小于</td>
<td align="center">如果 x 小于 y，则返回 true</td>
<td align="center">5&lt;8 返回 true</td>
</tr>
<tr>
<td align="center">x &gt;= y</td>
<td align="center">大于等于</td>
<td align="center">如果 x 大于或者等于 y，则返回 true</td>
<td align="center">5&gt;=8 返回 false</td>
</tr>
<tr>
<td align="center">x &lt;= y</td>
<td align="center">小于等于</td>
<td align="center">如果 x 小于或者等于 y，则返回 true</td>
<td align="center">5&lt;=8 返回 true</td>
</tr>
</tbody></table>
<ul>
<li>全等于 / 绝对等于，要求类型相同，且值相等</li>
</ul>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul>
<li>另一个条件运算符是 “?:”</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(expr1) ? (expr2) : (expr3)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 false 时的值为 expr3。</p>
</li>
<li><p>自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span> = <span class="string">'PHP 基础 '</span>;</span><br><span class="line">// 普通写法 </span><br><span class="line"><span class="variable">$username</span> = isset (<span class="variable">$test</span>) ? <span class="variable">$test</span> : <span class="string">'nobody'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$username</span>, PHP_EOL;     // PHP 基础 </span><br><span class="line"></span><br><span class="line">// PHP 5.3+ 版本写法 </span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$test</span> ?: <span class="string">'nobody'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$username</span>, PHP_EOL;     // PHP 基础 </span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>PHP_EOL 是一个换行符，兼容更大平台</p>
</li>
<li><p>在 PHP7+ 版本多了一个 NULL 合并运算符？？</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 如果 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 不存在返回 <span class="string">'nobody'</span>，否则返回 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 的值 </span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">'user'</span>] ?? <span class="string">'nobody'</span>;</span><br><span class="line">// 类似的三元运算符 </span><br><span class="line"><span class="variable">$username</span> = isset (<span class="variable">$_GET</span>[<span class="string">'user'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'user'</span>] : <span class="string">'nobody'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = 10</span><br><span class="line"><span class="variable">$y</span> = 5</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x and y</td>
<td align="center">与</td>
<td align="center">如果 x 和 y 都为 true，则返回 true</td>
<td align="center">(x &lt; 15 and y &gt; 1) 返回 true</td>
</tr>
<tr>
<td align="center">x or y</td>
<td align="center">或</td>
<td align="center">如果 x 和 y 至少有一个为 true，则返回 true</td>
<td align="center">(x &lt; 5 or y &gt; 1) 返回 true</td>
</tr>
<tr>
<td align="center">x xor y</td>
<td align="center">异或</td>
<td align="center">如果 x 和 y 有且仅有一个为 true，则返回 true</td>
<td align="center">(x == 10 xor y == 1) 返回 true</td>
</tr>
<tr>
<td align="center">x &amp;&amp; y</td>
<td align="center">与</td>
<td align="center">如果 x 和 y 都为 true，则返回 true</td>
<td align="center">(x &lt; 15 and y &gt; 1) 返回 true</td>
</tr>
<tr>
<td align="center">x &#124;&#124; y</td>
<td align="center">或</td>
<td align="center">如果 x 和 y 至少有一个为 true，则返回 true</td>
<td align="center">(x &lt; 5 or y &gt; 1) 返回 true</td>
</tr>
<tr>
<td align="center">!x</td>
<td align="center">非</td>
<td align="center">如果 x 不为 true，则返回 true</td>
<td align="center">!(x == y) 返回 true</td>
</tr>
</tbody></table>
<h3 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增 / 递减运算符"></a>递增 / 递减运算符</h3><ul>
<li>++/- - 符号在后，先赋值再 ++/- -</li>
<li>++/- - 符号在前，先 ++/- - 再赋值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=10; </span><br><span class="line"><span class="built_in">echo</span> ++<span class="variable">$x</span>;         // 输出 11</span><br><span class="line"> </span><br><span class="line"><span class="variable">$y</span>=10; </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$y</span>++;         // 输出 10</span><br><span class="line"> </span><br><span class="line"><span class="variable">$z</span>=5;</span><br><span class="line"><span class="built_in">echo</span> --<span class="variable">$z</span>;         // 输出 4</span><br><span class="line"> </span><br><span class="line"><span class="variable">$i</span>=5;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span>--;         // 输出 5</span><br></pre></td></tr></table></figure>

<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><ul>
<li>字符串符</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a . b</td>
<td align="center">并置</td>
<td align="center">连接两个字符串</td>
<td align="center">‘hello’ + ‘world’ = ‘helloworld’</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'hello'</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">'world'</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> . <span class="variable">$b</span>;</span><br><span class="line">var_dump (<span class="variable">$c</span>);      // <span class="string">'helloworld'</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = 112;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$c</span> . <span class="variable">$112</span></span><br><span class="line">var_dump (<span class="variable">$c</span>)       // <span class="string">'helloworld112'</span></span><br><span class="line"></span><br><span class="line">// 下面哪个运行速度快？</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> , <span class="variable">$b</span>;      // 更快 </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> . <span class="variable">$b</span>;      // 如果仅仅需要 <span class="built_in">echo</span> 结果，使用上边的更快 </span><br></pre></td></tr></table></figure>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul>
<li>基本的赋值运算符是 “=”。它意味着左操作数被设置为右侧表达式的值。也就是说，”$x = 5” 的值是 5</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">等同于</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x = y</td>
<td align="center">x = y</td>
<td align="center">左操作变量被设置成右侧表达式的值</td>
</tr>
<tr>
<td align="center">x += y</td>
<td align="center">x = x + y</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">x -= y</td>
<td align="center">x = x - y</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">x *= y</td>
<td align="center">x = x * y</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">x /= y</td>
<td align="center">x = x /y</td>
<td align="center">除</td>
</tr>
<tr>
<td align="center">x %= y</td>
<td align="center">x = x % y</td>
<td align="center">模</td>
</tr>
<tr>
<td align="center">a .= b</td>
<td align="center">a = a . b</td>
<td align="center">连接两个字符串</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>PHP基础巩固</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>基础</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 基础巩固 -- 变量</title>
    <url>/PHP%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/2020-06-13/PHP-foundation-consolidation-variable/</url>
    <content><![CDATA[<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul>
<li><p>变量以 $ 符号开始，后面跟着变量的名称</p>
</li>
<li><p>变量名必须以字母或者下划线字符开始</p>
</li>
<li><p>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</p>
</li>
<li><p>变量名不能包含空格</p>
</li>
<li><p>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p>
</li>
</ul>
<p>参考：<a href="https://www.runoob.com/php/php-datatypes.html" target="_blank" rel="noopener">菜鸟教程 PHP 数据类型</a></p>
<a id="more"></a>

<h3 id="Integer-整形"><a href="#Integer-整形" class="headerlink" title="Integer 整形"></a>Integer 整形</h3><ul>
<li><p>整数必须至少有一个数字 (0-9)</p>
</li>
<li><p>整数不能包含逗号或空格</p>
</li>
<li><p>整数是没有小数点的</p>
</li>
<li><p>整数可以是正数或负数</p>
</li>
<li><p>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = 5985;</span><br><span class="line">var_dump (<span class="variable">$x</span>);    //int (5985)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = -345;       // 负数 </span><br><span class="line">var_dump (<span class="variable">$x</span>);    //int (-345)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="variable">$x</span> = 0x8C;       // 十六进制数 </span><br><span class="line">var_dump (<span class="variable">$x</span>);    //int (140)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="variable">$x</span> = 047;        // 八进制数 </span><br><span class="line">var_dump (<span class="variable">$x</span>);    //int (39)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Float-浮点型"><a href="#Float-浮点型" class="headerlink" title="Float 浮点型"></a>Float 浮点型</h3><ul>
<li>浮点数是带小数部分的数字，或是指数形式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = 10.365;</span><br><span class="line">var_dump (<span class="variable">$x</span>);    // <span class="built_in">float</span>(10.365)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = 2.4e3;</span><br><span class="line">var_dump (<span class="variable">$x</span>);    // <span class="built_in">float</span>(2400)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = 8E-5;</span><br><span class="line">var_dump (<span class="variable">$x</span>);    // <span class="built_in">float</span>(8.0E-5)</span><br></pre></td></tr></table></figure>

<h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h3><ul>
<li><p>一个字符串是一串字符的序列，就像 “Hello world!”</p>
</li>
<li><p>你可以将任何文本放在单引号和双引号中</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;         // Hello world!</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;         // Hello world!</span><br></pre></td></tr></table></figure>

<h3 id="Boolean-布尔型"><a href="#Boolean-布尔型" class="headerlink" title="Boolean 布尔型"></a>Boolean 布尔型</h3><ul>
<li>布尔型可以是 TRUE 或 FALSE</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>布尔型通常是用于条件判断</li>
</ul>
<h3 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a>Array 数组</h3><ul>
<li>数组可以在一个变量中存储多个值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span>=array (<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line">var_dump (<span class="variable">$arr</span>);  //array (3)&#123;[0]=&gt;string (5)<span class="string">"Volvo"</span> [1]=&gt;string (3)<span class="string">"BMW"</span> [2]=&gt;string (6)<span class="string">"Toyota"</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h3><ul>
<li><p>对象数据类型也可以用于存储数据</p>
</li>
<li><p>在 PHP 中，对象必须声明</p>
</li>
<li><p>首先，你必须使用 class 关键字声明类对象。类是可以包含属性和方法的结构</p>
</li>
<li><p>然后我们在类中定义数据类型，然后在实例化的类中使用数据类型</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line">  var <span class="variable">$color</span>;</span><br><span class="line">  <span class="keyword">function</span> __construct (<span class="variable">$color</span>=<span class="string">"green"</span>) &#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;color = <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">what_color</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> print_vars (<span class="variable">$obj</span>) &#123;</span><br><span class="line">   foreach (get_object_vars (<span class="variable">$obj</span>) as <span class="variable">$prop</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"\t<span class="variable">$prop</span> = <span class="variable">$val</span>\n"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例一个对象 </span><br><span class="line"><span class="variable">$herbie</span> = new Car (<span class="string">"white"</span>);</span><br><span class="line"></span><br><span class="line">// 显示 herbie 属性 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\therbie: Properties\n"</span>;</span><br><span class="line">print_vars (<span class="variable">$herbie</span>);</span><br><span class="line"></span><br><span class="line">//herbie: Properties color = white</span><br></pre></td></tr></table></figure>

<h3 id="NULL-空值"><a href="#NULL-空值" class="headerlink" title="NULL 空值"></a>NULL 空值</h3><ul>
<li><p>NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值</p>
</li>
<li><p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和 NULL 值的区别</p>
</li>
<li><p>可以通过设置变量值为 NULL 来清空变量数据</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="variable">$x</span>=null;</span><br><span class="line">var_dump (<span class="variable">$x</span>);    // NULL</span><br></pre></td></tr></table></figure>

<h2 id="变量检测"><a href="#变量检测" class="headerlink" title="变量检测"></a>变量检测</h2><ul>
<li><p>isset — 检测变量是否已设置并且非 NULL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">isset ( mixed <span class="variable">$var</span> [, mixed $... ] ) : bool</span><br></pre></td></tr></table></figure></li>
<li><p>检测变量是否设置，并且不是 NULL</p>
</li>
<li><p>如果已经使用 unset () 释放 / 销毁了一个变量之后。若使用 isset () 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是 null 字符（”\0”）并不等同于 PHP 的 NULL 常量</p>
</li>
<li><p>如果一次传入多个参数，那么 isset () 只有在全部参数都以被设置时返回 TRUE 计算过程从左至右，中途遇到没有设置的变量时就会立即停止</p>
</li>
</ul>
<p>参考：<a href="https://www.php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">PHP 手册 isset</a></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">// 结果为 TRUE，所以后边的文本将被打印出来。</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$var</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This var is set so I will print."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在后边的例子中，我们将使用 var_dump 输出 isset () 的返回值。</span><br><span class="line">//the <span class="built_in">return</span> value of isset ().</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">"test"</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">"anothertest"</span>;</span><br><span class="line"></span><br><span class="line">var_dump (isset (<span class="variable">$a</span>))       // TRUE</span><br><span class="line">var_dump (isset (<span class="variable">$a</span>, <span class="variable">$b</span>));  // TRUE</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> (<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">var_dump (isset (<span class="variable">$a</span>));      // FALSE</span><br><span class="line">var_dump (isset (<span class="variable">$a</span>, <span class="variable">$b</span>));  // FALSE</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = NULL;</span><br><span class="line">var_dump (isset (<span class="variable">$foo</span>));    // FALSE</span><br></pre></td></tr></table></figure>

<h2 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h2><h3 id="gettype"><a href="#gettype" class="headerlink" title="gettype"></a>gettype</h3><ul>
<li>gettype — 获取变量的类型<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ettype ( mixed <span class="variable">$var</span> ) : string</span><br><span class="line"></span><br><span class="line">Warning</span><br><span class="line"> 不要使用 gettype () 来测试某种类型，因为其返回的字符串在未来的版本中可能需要改变。此外，由于包含了字符串的比较，它的运行也是较慢的。</span><br><span class="line"> 可以使用 is_* 函数代替。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">echo</span> gettype (<span class="variable">$a</span>);  //string</span><br></pre></td></tr></table></figure>
<p>返回的字符串的可能值为：</p>
<ul>
<li><p>“boolean”（从 PHP 4 起）</p>
</li>
<li><p>“integer”</p>
</li>
<li><p>“double”（由于历史原因，如果是 float 则返回 “double”，而不是 “float”）</p>
</li>
<li><p>“string”</p>
</li>
<li><p>“array”</p>
</li>
<li><p>“object”</p>
</li>
<li><p>“resource”（从 PHP 4 起）</p>
</li>
<li><p>“NULL”（从 PHP 4 起）</p>
</li>
<li><p>“user function”（只用于 PHP 3，现已停用）</p>
</li>
<li><p>“unknown type”</p>
</li>
</ul>
<p>参考：<a href="https://www.php.net/manual/zh/function.gettype.php" target="_blank" rel="noopener">PHP 手册 gettype</a></p>
<h3 id="is"><a href="#is" class="headerlink" title="is_*"></a>is_*</h3><ul>
<li><p>is_* — 判断是否是想要的类型</p>
</li>
<li><p>is_int，is_float，is_array，is_integer ()，is_string ()，is_object ()</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">if</span>(is_int (<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a 是整形 '</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a 不是整形 '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//a 不是整形 </span><br></pre></td></tr></table></figure>

<h2 id="变量打印"><a href="#变量打印" class="headerlink" title="变量打印"></a>变量打印</h2><ul>
<li><p>echo，print，var_dump</p>
<ul>
<li><p>echo — 可以输出一个或多个字符串</p>
</li>
<li><p>print_r — 以易于理解的格式打印变量</p>
</li>
<li><p>var_dump — 打印变量的相关信息</p>
</li>
</ul>
</li>
</ul>
<p>参考：<a href="https://www.php.net/manual/zh/function.print-r.php" target="_blank" rel="noopener">PHP 手册 print_r</a></p>
<p>参考：<a href="https://www.php.net/manual/zh/function.var-dump.php" target="_blank" rel="noopener">PHP 手册 var_dump</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = 1;</span><br><span class="line"><span class="variable">$b</span> = array (<span class="string">'a'</span> =&gt; <span class="string">'apple'</span>, <span class="string">'b'</span> =&gt; <span class="string">'banana'</span>, <span class="string">'c'</span> =&gt; array (<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>))</span><br><span class="line"><span class="variable">$c</span> = array (1, 2, array (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>;           // 1</span><br><span class="line"></span><br><span class="line">print_r (<span class="variable">$b</span>);       // 输出结果 </span><br><span class="line">                   // Array</span><br><span class="line">                   // (</span><br><span class="line">                   //     [a] =&gt; apple</span><br><span class="line">                   //     [b] =&gt; banana</span><br><span class="line">                   //     [c] =&gt; Array</span><br><span class="line">                   //         (</span><br><span class="line">                   //             [0] =&gt; x</span><br><span class="line">                   //             [1] =&gt; y</span><br><span class="line">                   //             [2] =&gt; z</span><br><span class="line">                   //         )</span><br><span class="line">                   // )</span><br><span class="line"></span><br><span class="line">var_dump (<span class="variable">$b</span>);      // 输出结果 </span><br><span class="line">                   //array (3) &#123;</span><br><span class="line">                   //     [0]=&gt;</span><br><span class="line">                   //     int (1)</span><br><span class="line">                   //     [1]=&gt;</span><br><span class="line">                   //     int (2)</span><br><span class="line">                   //     [2]=&gt;</span><br><span class="line">                   //     array (3) &#123;</span><br><span class="line">                   //         [0] =&gt; </span><br><span class="line">                   //         string (1) <span class="string">"a"</span></span><br><span class="line">                   //         [1] =&gt; </span><br><span class="line">                   //         string (1) <span class="string">"b"</span></span><br><span class="line">                   //         [2] =&gt; </span><br><span class="line">                   //         string (1) <span class="string">"c"</span></span><br><span class="line">                   //     &#125;</span><br><span class="line">                   // &#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul>
<li>PHP 中，变量的类型是可以随时转变的，最常见的是字符串与数字的转换，或是数字 / 字符串 -&gt; 布尔值的转换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 字符串到数字的转换，从左到右截取，直到碰到不合法的数字，截取出来的部分转成数字 </span><br><span class="line"><span class="variable">$a</span> = <span class="string">'12'</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$a</span> + 3;</span><br><span class="line">var_dump (<span class="variable">$a</span>);      //int (15)</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = 123;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$a</span> . <span class="string">'hello'</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>;           // 123hello</span><br><span class="line"></span><br><span class="line">// 到布尔值的转换，以下值，都被当成布尔值的假，而其他值，都被当成布尔值的真 </span><br><span class="line">// <span class="string">''</span>, <span class="string">'0'</span>, 0, 0.0, NULL, FALSE, array (), var <span class="variable">$var</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul>
<li>传值赋值与引用赋值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 传值赋值 </span><br><span class="line"><span class="variable">$li</span> = 29;</span><br><span class="line"><span class="variable">$wang</span> = 23;</span><br><span class="line"><span class="variable">$wang</span> = <span class="variable">$li</span>;</span><br><span class="line"></span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, 29</span><br><span class="line"><span class="variable">$wang</span> = <span class="string">'w'</span>;</span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, w</span><br><span class="line"></span><br><span class="line">// 引用赋值 </span><br><span class="line"><span class="variable">$li</span> = 29;</span><br><span class="line"><span class="variable">$wang</span> = 23;</span><br><span class="line"><span class="variable">$wang</span> = &amp;<span class="variable">$li</span>;</span><br><span class="line"></span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, 29</span><br><span class="line"><span class="variable">$wang</span> = <span class="string">'w'</span>;</span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //w, w</span><br></pre></td></tr></table></figure>

<h2 id="释放-销毁"><a href="#释放-销毁" class="headerlink" title="释放 / 销毁"></a>释放 / 销毁</h2><ul>
<li><p>unset — 释放给定的变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> ( mixed <span class="variable">$var</span> [, mixed $... ] ) : void</span><br></pre></td></tr></table></figure></li>
<li><p>unset () 销毁指定的变量</p>
</li>
<li><p>unset () 在函数中的行为会依赖于想要销毁的变量的类型而有所不同</p>
</li>
<li><p>如果在函数中 unset () 一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用 unset () 之前一样的值</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = 99;</span><br><span class="line"><span class="built_in">unset</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(isset (<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a 存在 '</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a 不存在 '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//a 不存在 </span><br><span class="line"></span><br><span class="line"><span class="variable">$li</span> = 29;</span><br><span class="line"><span class="variable">$wang</span> = &amp;<span class="variable">$li</span>;</span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, 29</span><br><span class="line"><span class="variable">$wang</span> = 20;</span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //20, 20</span><br><span class="line"><span class="built_in">unset</span>(<span class="variable">$li</span>);</span><br><span class="line">var_dump (<span class="variable">$li</span>, <span class="variable">$wang</span>);    //null, 20</span><br><span class="line">// 销毁后会提示 Notice: Undefined variable: li <span class="keyword">in</span> xxxxxx</span><br></pre></td></tr></table></figure>

<h2 id="动态变量名"><a href="#动态变量名" class="headerlink" title="动态变量名"></a>动态变量名</h2><ul>
<li>用变量的值再做变量的名，如 $$a;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 动态变量名 </span><br><span class="line"><span class="variable">$liubei</span> = <span class="string">' 河北人 '</span>;</span><br><span class="line"><span class="variable">$laoda</span> = <span class="string">'liubei'</span>;</span><br><span class="line"><span class="variable">$paihang</span> = <span class="string">'laoda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$laoda</span>, $<span class="variable">$laoda</span>, $$<span class="variable">$paihang</span>;     //liubei, 河北人，河北人 </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP基础巩固</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>基础</tag>
        <tag>变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/be-born/2020-06-12/undefined/</url>
    <content><![CDATA[<p>I set up my blog on June 12, 2020</p>
<a id="more"></a>

<p>上三品：</p>
<p>舍得，给予大众分享所得；</p>
<p>包容，容纳自他一切生命；</p>
<p>觉醒，觉悟宇宙人生真相。</p>
<p>中三品：</p>
<p>感恩，感恩得到的一切；</p>
<p>知足，满足享受的一切；</p>
<p>无为，安住现成的一切。</p>
<p>下三品：</p>
<p>自信，自信能成就一切但不傲慢；</p>
<p>谦虚，自知要学无止境但不自卑；</p>
<p>认错，自省有缺点缺陷知错能改。</p>
]]></content>
      <categories>
        <category>be born</category>
      </categories>
      <tags>
        <tag>born</tag>
      </tags>
  </entry>
</search>

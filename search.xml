<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP基础巩固--运算符</title>
    <url>/PHP%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/2020-06-14/PHP-foundation-consolidation-operator/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>参考：<a href="https://www.runoob.com/php/php-operators.html" target="_blank" rel="noopener">PHP菜鸟教程</a></p>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul>
<li><p>在 PHP 中，赋值运算符 = 用于给变量赋值</p>
</li>
<li><p>在 PHP 中，算术运算符 + 用于把值加在一起</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x + y</td>
<td align="center">加</td>
<td align="center">x和y的和</td>
<td align="center">2 + 2</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">x - y</td>
<td align="center">减</td>
<td align="center">x和y的差</td>
<td align="center">5 - 2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">x * y</td>
<td align="center">乘</td>
<td align="center">x和y的积</td>
<td align="center">5 * 2</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">x / y</td>
<td align="center">除</td>
<td align="center">x和y的商</td>
<td align="center">15 / 5</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">x % y</td>
<td align="center">模</td>
<td align="center">x除以y的余数</td>
<td align="center">5 % 2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">取反</td>
<td align="center">x取反</td>
<td align="center">$x = 2  echo -x</td>
<td align="center">-2</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>注意：</p>
<ul>
<li><p>如果int型，运算后数据过大，会转换成float型</p>
</li>
<li><p>去摸算法时，结果的正负仅取决于被除数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = 10            // 使用10或-10</span><br><span class="line"><span class="variable">$b</span> = 3             // 使用3或-3</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> / <span class="variable">$b</span>       // a=-10时，均为-1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul>
<li><p>比较运算符可以比较两个值</p>
</li>
<li><p>比较运算符的结果是布尔型的值</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x == y</td>
<td align="center">等于</td>
<td align="center">如果 x 等于 y，则返回 true</td>
<td align="center">5==8 返回 false</td>
</tr>
<tr>
<td align="center">x === y</td>
<td align="center">绝对等于</td>
<td align="center">如果 x 等于 y，且它们类型相同，则返回 true</td>
<td align="center">5===”5” 返回 false</td>
</tr>
<tr>
<td align="center">x != y</td>
<td align="center">不等于</td>
<td align="center">如果 x 不等于 y，则返回 true</td>
<td align="center">5!=8 返回 true</td>
</tr>
<tr>
<td align="center">x &lt;&gt; y</td>
<td align="center">不等于</td>
<td align="center">如果 x 不等于 y，则返回 true</td>
<td align="center">5&lt;&gt;8 返回 true</td>
</tr>
<tr>
<td align="center">x !== y</td>
<td align="center">绝对不等于</td>
<td align="center">如果 x 不等于 y，或它们类型不相同，则返回 true</td>
<td align="center">5!==”5” 返回 true</td>
</tr>
<tr>
<td align="center">x &gt; y</td>
<td align="center">大于</td>
<td align="center">如果 x 大于 y，则返回 true</td>
<td align="center">5&gt;8 返回 false</td>
</tr>
<tr>
<td align="center">x &lt; y</td>
<td align="center">小于</td>
<td align="center">如果 x 小于 y，则返回 true</td>
<td align="center">5&lt;8 返回 true</td>
</tr>
<tr>
<td align="center">x &gt;= y</td>
<td align="center">大于等于</td>
<td align="center">如果 x 大于或者等于 y，则返回 true</td>
<td align="center">5&gt;=8 返回 false</td>
</tr>
<tr>
<td align="center">x &lt;= y</td>
<td align="center">小于等于</td>
<td align="center">如果 x 小于或者等于 y，则返回 true</td>
<td align="center">5&lt;=8 返回 true</td>
</tr>
</tbody></table>
<ul>
<li>全等于/绝对等于，要求类型相同，且值相等</li>
</ul>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul>
<li>另一个条件运算符是”?:”</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(expr1) ? (expr2) : (expr3)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 false 时的值为 expr3。</p>
</li>
<li><p>自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span> = <span class="string">'PHP基础'</span>;</span><br><span class="line">// 普通写法</span><br><span class="line"><span class="variable">$username</span> = isset(<span class="variable">$test</span>) ? <span class="variable">$test</span> : <span class="string">'nobody'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$username</span>, PHP_EOL;     // PHP基础</span><br><span class="line"></span><br><span class="line">// PHP 5.3+ 版本写法</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$test</span> ?: <span class="string">'nobody'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$username</span>, PHP_EOL;     // PHP基础</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>PHP_EOL 是一个换行符，兼容更大平台</p>
</li>
<li><p>在 PHP7+ 版本多了一个 NULL 合并运算符 ??</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 如果 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 不存在返回 <span class="string">'nobody'</span>，否则返回 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 的值</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">'user'</span>] ?? <span class="string">'nobody'</span>;</span><br><span class="line">// 类似的三元运算符</span><br><span class="line"><span class="variable">$username</span> = isset(<span class="variable">$_GET</span>[<span class="string">'user'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'user'</span>] : <span class="string">'nobody'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = 10</span><br><span class="line"><span class="variable">$y</span> = 5</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x and y</td>
<td align="center">与</td>
<td align="center">如果 x 和 y 都为true，则返回 true</td>
<td align="center">(x &lt; 15 and y &gt; 1) 返回true</td>
</tr>
<tr>
<td align="center">x or y</td>
<td align="center">或</td>
<td align="center">如果 x 和 y 至少有一个为true，则返回 true</td>
<td align="center">(x &lt; 5 or y &gt; 1) 返回true</td>
</tr>
<tr>
<td align="center">x xor y</td>
<td align="center">异或</td>
<td align="center">如果 x 和 y 有且仅有一个为true，则返回 true</td>
<td align="center">(x == 10 xor y == 1) 返回true</td>
</tr>
<tr>
<td align="center">x &amp;&amp; y</td>
<td align="center">与</td>
<td align="center">如果 x 和 y 都为true，则返回 true</td>
<td align="center">(x &lt; 15 and y &gt; 1) 返回true</td>
</tr>
<tr>
<td align="center">x &#124;&#124; y</td>
<td align="center">或</td>
<td align="center">如果 x 和 y 至少有一个为true，则返回 true</td>
<td align="center">(x &lt; 5 or y &gt; 1) 返回true</td>
</tr>
<tr>
<td align="center">!x</td>
<td align="center">非</td>
<td align="center">如果 x 不为true，则返回 true</td>
<td align="center">!(x == y) 返回true</td>
</tr>
</tbody></table>
<h3 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增/递减运算符"></a>递增/递减运算符</h3><ul>
<li>++/- -符号在后，先赋值再++/- -</li>
<li>++/- -符号在前，先++/- -再赋值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=10; </span><br><span class="line"><span class="built_in">echo</span> ++<span class="variable">$x</span>;         // 输出11</span><br><span class="line"> </span><br><span class="line"><span class="variable">$y</span>=10; </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$y</span>++;         // 输出10</span><br><span class="line"> </span><br><span class="line"><span class="variable">$z</span>=5;</span><br><span class="line"><span class="built_in">echo</span> --<span class="variable">$z</span>;         // 输出4</span><br><span class="line"> </span><br><span class="line"><span class="variable">$i</span>=5;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span>--;         // 输出5</span><br></pre></td></tr></table></figure>

<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><ul>
<li>字符串符</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a . b</td>
<td align="center">并置</td>
<td align="center">连接两个字符串</td>
<td align="center">‘hello’ + ‘world’ = ‘helloworld’</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'hello'</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">'world'</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> . <span class="variable">$b</span>;</span><br><span class="line">var_dump(<span class="variable">$c</span>);      // <span class="string">'helloworld'</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = 112;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$c</span> . <span class="variable">$112</span></span><br><span class="line">var_dump(<span class="variable">$c</span>)       // <span class="string">'helloworld112'</span></span><br><span class="line"></span><br><span class="line">// 下面哪个运行速度快？</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> , <span class="variable">$b</span>;      // 更快</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> . <span class="variable">$b</span>;      // 如果仅仅需要 <span class="built_in">echo</span> 结果，使用上边的更快</span><br></pre></td></tr></table></figure>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul>
<li>基本的赋值运算符是 “=”。它意味着左操作数被设置为右侧表达式的值。也就是说，”$x = 5” 的值是 5</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">等同于</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x = y</td>
<td align="center">x = y</td>
<td align="center">左操作变量被设置成右侧表达式的值</td>
</tr>
<tr>
<td align="center">x += y</td>
<td align="center">x = x + y</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">x -= y</td>
<td align="center">x = x - y</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">x *= y</td>
<td align="center">x = x * y</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">x /= y</td>
<td align="center">x = x / y</td>
<td align="center">除</td>
</tr>
<tr>
<td align="center">x %= y</td>
<td align="center">x = x % y</td>
<td align="center">模</td>
</tr>
<tr>
<td align="center">a .= b</td>
<td align="center">a = a . b</td>
<td align="center">连接两个字符串</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>PHP基础巩固</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>基础</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP基础巩固--变量</title>
    <url>/PHP%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/2020-06-13/PHP-foundation-consolidation-variable/</url>
    <content><![CDATA[<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul>
<li><p>变量以 $ 符号开始，后面跟着变量的名称</p>
</li>
<li><p>变量名必须以字母或者下划线字符开始</p>
</li>
<li><p>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</p>
</li>
<li><p>变量名不能包含空格</p>
</li>
<li><p>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p>
</li>
</ul>
<p>参考：<a href="https://www.runoob.com/php/php-datatypes.html" target="_blank" rel="noopener">菜鸟教程PHP数据类型</a></p>
<a id="more"></a>

<h3 id="Integer整形"><a href="#Integer整形" class="headerlink" title="Integer整形"></a>Integer整形</h3><ul>
<li><p>整数必须至少有一个数字 (0-9)</p>
</li>
<li><p>整数不能包含逗号或空格</p>
</li>
<li><p>整数是没有小数点的</p>
</li>
<li><p>整数可以是正数或负数</p>
</li>
<li><p>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = 5985;</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // int(5985)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = -345;       // 负数 </span><br><span class="line">var_dump(<span class="variable">$x</span>);    // int(-345)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="variable">$x</span> = 0x8C;       // 十六进制数</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // int(140)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="variable">$x</span> = 047;        // 八进制数</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // int(39)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Float浮点型"><a href="#Float浮点型" class="headerlink" title="Float浮点型"></a>Float浮点型</h3><ul>
<li>浮点数是带小数部分的数字，或是指数形式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = 10.365;</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // <span class="built_in">float</span>(10.365)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = 2.4e3;</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // <span class="built_in">float</span>(2400)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = 8E-5;</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // <span class="built_in">float</span>(8.0E-5)</span><br></pre></td></tr></table></figure>

<h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><ul>
<li><p>一个字符串是一串字符的序列，就像 “Hello world!”</p>
</li>
<li><p>你可以将任何文本放在单引号和双引号中</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;         // Hello world!</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="variable">$x</span> = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;         // Hello world!</span><br></pre></td></tr></table></figure>

<h3 id="Boolean布尔型"><a href="#Boolean布尔型" class="headerlink" title="Boolean布尔型"></a>Boolean布尔型</h3><ul>
<li>布尔型可以是 TRUE 或 FALSE</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>布尔型通常是用于条件判断</li>
</ul>
<h3 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h3><ul>
<li>数组可以在一个变量中存储多个值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span>=array(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line">var_dump(<span class="variable">$arr</span>);  // array(3)&#123;[0]=&gt;string(5)<span class="string">"Volvo"</span> [1]=&gt;string(3)<span class="string">"BMW"</span> [2]=&gt;string(6)<span class="string">"Toyota"</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h3><ul>
<li><p>对象数据类型也可以用于存储数据</p>
</li>
<li><p>在 PHP 中，对象必须声明</p>
</li>
<li><p>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构</p>
</li>
<li><p>然后我们在类中定义数据类型，然后在实例化的类中使用数据类型</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line">  var <span class="variable">$color</span>;</span><br><span class="line">  <span class="keyword">function</span> __construct(<span class="variable">$color</span>=<span class="string">"green"</span>) &#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;color = <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">what_color</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> print_vars(<span class="variable">$obj</span>) &#123;</span><br><span class="line">   foreach (get_object_vars(<span class="variable">$obj</span>) as <span class="variable">$prop</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"\t<span class="variable">$prop</span> = <span class="variable">$val</span>\n"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例一个对象</span><br><span class="line"><span class="variable">$herbie</span> = new Car(<span class="string">"white"</span>);</span><br><span class="line"></span><br><span class="line">// 显示 herbie 属性</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\therbie: Properties\n"</span>;</span><br><span class="line">print_vars(<span class="variable">$herbie</span>);</span><br><span class="line"></span><br><span class="line">// herbie: Properties color = white</span><br></pre></td></tr></table></figure>

<h3 id="NULL空值"><a href="#NULL空值" class="headerlink" title="NULL空值"></a>NULL空值</h3><ul>
<li><p>NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值</p>
</li>
<li><p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别</p>
</li>
<li><p>可以通过设置变量值为 NULL 来清空变量数据</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="variable">$x</span>=null;</span><br><span class="line">var_dump(<span class="variable">$x</span>);    // NULL</span><br></pre></td></tr></table></figure>

<h2 id="变量检测"><a href="#变量检测" class="headerlink" title="变量检测"></a>变量检测</h2><ul>
<li><p>isset — 检测变量是否已设置并且非 NULL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">isset ( mixed <span class="variable">$var</span> [, mixed $... ] ) : bool</span><br></pre></td></tr></table></figure></li>
<li><p>检测变量是否设置，并且不是 NULL</p>
</li>
<li><p>如果已经使用 unset() 释放/销毁了一个变量之后。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是 null 字符（”\0”）并不等同于 PHP 的 NULL 常量</p>
</li>
<li><p>如果一次传入多个参数，那么 isset() 只有在全部参数都以被设置时返回 TRUE 计算过程从左至右，中途遇到没有设置的变量时就会立即停止</p>
</li>
</ul>
<p>参考：<a href="https://www.php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">PHP手册isset</a></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">// 结果为 TRUE，所以后边的文本将被打印出来。</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$var</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This var is set so I will print."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在后边的例子中，我们将使用 var_dump 输出 isset() 的返回值。</span><br><span class="line">// the <span class="built_in">return</span> value of isset().</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">"test"</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">"anothertest"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(isset(<span class="variable">$a</span>))       // TRUE</span><br><span class="line">var_dump(isset(<span class="variable">$a</span>, <span class="variable">$b</span>));  // TRUE</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> (<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">var_dump(isset(<span class="variable">$a</span>));      // FALSE</span><br><span class="line">var_dump(isset(<span class="variable">$a</span>, <span class="variable">$b</span>));  // FALSE</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = NULL;</span><br><span class="line">var_dump(isset(<span class="variable">$foo</span>));    // FALSE</span><br></pre></td></tr></table></figure>

<h2 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h2><h3 id="gettype"><a href="#gettype" class="headerlink" title="gettype"></a>gettype</h3><ul>
<li>gettype — 获取变量的类型<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ettype ( mixed <span class="variable">$var</span> ) : string</span><br><span class="line"></span><br><span class="line">Warning</span><br><span class="line">不要使用 gettype() 来测试某种类型，因为其返回的字符串在未来的版本中可能需要改变。此外，由于包含了字符串的比较，它的运行也是较慢的。</span><br><span class="line">可以使用 is_* 函数代替。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">echo</span> gettype(<span class="variable">$a</span>);  // string</span><br></pre></td></tr></table></figure>
<p>返回的字符串的可能值为：</p>
<ul>
<li><p>“boolean”（从 PHP 4 起）</p>
</li>
<li><p>“integer”</p>
</li>
<li><p>“double”（由于历史原因，如果是 float 则返回“double”，而不是“float”）</p>
</li>
<li><p>“string”</p>
</li>
<li><p>“array”</p>
</li>
<li><p>“object”</p>
</li>
<li><p>“resource”（从 PHP 4 起）</p>
</li>
<li><p>“NULL”（从 PHP 4 起）</p>
</li>
<li><p>“user function”（只用于 PHP 3，现已停用）</p>
</li>
<li><p>“unknown type”</p>
</li>
</ul>
<p>参考：<a href="https://www.php.net/manual/zh/function.gettype.php" target="_blank" rel="noopener">PHP手册gettype</a></p>
<h3 id="is"><a href="#is" class="headerlink" title="is_*"></a>is_*</h3><ul>
<li><p>is_* — 判断是否是想要的类型</p>
</li>
<li><p>is_int，is_float，is_array，is_integer()，is_string()，is_object()</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">if</span>(is_int(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a是整形'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a不是整形'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// a不是整形</span><br></pre></td></tr></table></figure>

<h2 id="变量打印"><a href="#变量打印" class="headerlink" title="变量打印"></a>变量打印</h2><ul>
<li><p>echo，print，var_dump</p>
<ul>
<li><p>echo — 可以输出一个或多个字符串</p>
</li>
<li><p>print_r — 以易于理解的格式打印变量</p>
</li>
<li><p>var_dump — 打印变量的相关信息</p>
</li>
</ul>
</li>
</ul>
<p>参考：<a href="https://www.php.net/manual/zh/function.print-r.php" target="_blank" rel="noopener">PHP手册print_r</a></p>
<p>参考：<a href="https://www.php.net/manual/zh/function.var-dump.php" target="_blank" rel="noopener">PHP手册var_dump</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = 1;</span><br><span class="line"><span class="variable">$b</span> = array(<span class="string">'a'</span> =&gt; <span class="string">'apple'</span>, <span class="string">'b'</span> =&gt; <span class="string">'banana'</span>, <span class="string">'c'</span> =&gt; array (<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>))</span><br><span class="line"><span class="variable">$c</span> = array(1, 2, array(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>;           // 1</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$b</span>);       // 输出结果</span><br><span class="line">                   // Array</span><br><span class="line">                   // (</span><br><span class="line">                   //     [a] =&gt; apple</span><br><span class="line">                   //     [b] =&gt; banana</span><br><span class="line">                   //     [c] =&gt; Array</span><br><span class="line">                   //         (</span><br><span class="line">                   //             [0] =&gt; x</span><br><span class="line">                   //             [1] =&gt; y</span><br><span class="line">                   //             [2] =&gt; z</span><br><span class="line">                   //         )</span><br><span class="line">                   // )</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$b</span>);      // 输出结果</span><br><span class="line">                   // array(3) &#123;</span><br><span class="line">                   //     [0]=&gt;</span><br><span class="line">                   //     int(1)</span><br><span class="line">                   //     [1]=&gt;</span><br><span class="line">                   //     int(2)</span><br><span class="line">                   //     [2]=&gt;</span><br><span class="line">                   //     array(3) &#123;</span><br><span class="line">                   //         [0] =&gt; </span><br><span class="line">                   //         string(1) <span class="string">"a"</span></span><br><span class="line">                   //         [1] =&gt; </span><br><span class="line">                   //         string(1) <span class="string">"b"</span></span><br><span class="line">                   //         [2] =&gt; </span><br><span class="line">                   //         string(1) <span class="string">"c"</span></span><br><span class="line">                   //     &#125;</span><br><span class="line">                   // &#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul>
<li>PHP中，变量的类型是可以随时转变的，最常见的是字符串与数字的转换，或是数字/字符串 -&gt; 布尔值的转换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//字符串到数字的转换，从左到右截取，直到碰到不合法的数字，截取出来的部分转成数字</span><br><span class="line"><span class="variable">$a</span> = <span class="string">'12'</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$a</span> + 3;</span><br><span class="line">var_dump(<span class="variable">$a</span>);      // int(15)</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = 123;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$a</span> . <span class="string">'hello'</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>;           // 123hello</span><br><span class="line"></span><br><span class="line">//到布尔值的转换，以下值，都被当成布尔值的假，而其他值，都被当成布尔值的真</span><br><span class="line">// <span class="string">''</span>, <span class="string">'0'</span>, 0, 0.0, NULL, FALSE, array(), var <span class="variable">$var</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul>
<li>传值赋值与引用赋值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 传值赋值</span><br><span class="line"><span class="variable">$li</span> = 29;</span><br><span class="line"><span class="variable">$wang</span> = 23;</span><br><span class="line"><span class="variable">$wang</span> = <span class="variable">$li</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, 29</span><br><span class="line"><span class="variable">$wang</span> = <span class="string">'w'</span>;</span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, w</span><br><span class="line"></span><br><span class="line">//引用赋值</span><br><span class="line"><span class="variable">$li</span> = 29;</span><br><span class="line"><span class="variable">$wang</span> = 23;</span><br><span class="line"><span class="variable">$wang</span> = &amp;<span class="variable">$li</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, 29</span><br><span class="line"><span class="variable">$wang</span> = <span class="string">'w'</span>;</span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //w, w</span><br></pre></td></tr></table></figure>

<h2 id="释放-销毁"><a href="#释放-销毁" class="headerlink" title="释放/销毁"></a>释放/销毁</h2><ul>
<li><p>unset — 释放给定的变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> ( mixed <span class="variable">$var</span> [, mixed $... ] ) : void</span><br></pre></td></tr></table></figure></li>
<li><p>unset() 销毁指定的变量</p>
</li>
<li><p>unset() 在函数中的行为会依赖于想要销毁的变量的类型而有所不同</p>
</li>
<li><p>如果在函数中 unset() 一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用 unset() 之前一样的值</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = 99;</span><br><span class="line"><span class="built_in">unset</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a存在'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'a不存在'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// a不存在</span><br><span class="line"></span><br><span class="line"><span class="variable">$li</span> = 29;</span><br><span class="line"><span class="variable">$wang</span> = &amp;<span class="variable">$li</span>;</span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //29, 29</span><br><span class="line"><span class="variable">$wang</span> = 20;</span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //20, 20</span><br><span class="line"><span class="built_in">unset</span>(<span class="variable">$li</span>);</span><br><span class="line">var_dump(<span class="variable">$li</span>, <span class="variable">$wang</span>);    //null, 20</span><br><span class="line">// 销毁后会提示Notice: Undefined variable: li <span class="keyword">in</span> xxxxxx</span><br></pre></td></tr></table></figure>

<h2 id="动态变量名"><a href="#动态变量名" class="headerlink" title="动态变量名"></a>动态变量名</h2><ul>
<li>用变量的值再做变量的名，如$$a;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 动态变量名</span><br><span class="line"><span class="variable">$liubei</span> = <span class="string">'河北人'</span>;</span><br><span class="line"><span class="variable">$laoda</span> = <span class="string">'liubei'</span>;</span><br><span class="line"><span class="variable">$paihang</span> = <span class="string">'laoda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$laoda</span>, $<span class="variable">$laoda</span>, $$<span class="variable">$paihang</span>;     //liubei, 河北人, 河北人</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP基础巩固</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>基础</tag>
        <tag>变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/be-born/2020-06-12/undefined/</url>
    <content><![CDATA[<p>I set up my blog on June 12, 2020</p>
<a id="more"></a>

<p>上三品：</p>
<p>舍得，给予大众分享所得；</p>
<p>包容，容纳自他一切生命；</p>
<p>觉醒，觉悟宇宙人生真相。</p>
<p>中三品：</p>
<p>感恩，感恩得到的一切；</p>
<p>知足，满足享受的一切；</p>
<p>无为，安住现成的一切。</p>
<p>下三品：</p>
<p>自信，自信能成就一切但不傲慢；</p>
<p>谦虚，自知要学无止境但不自卑；</p>
<p>认错，自省有缺点缺陷知错能改。</p>
]]></content>
      <categories>
        <category>be born</category>
      </categories>
      <tags>
        <tag>born</tag>
      </tags>
  </entry>
</search>
